import adafruit_mpu6050
import busio
import board
import time
import digitalio
from adafruit_display_text import label
import adafruit_displayio_ssd1306 
import terminalio 
import displayio


displayio.release_displays()

sda_pin = board.GP14
scl_pin = board.GP15 
i2c = busio.I2C(scl_pin, sda_pin)  # This is creating the I2C and telling it to use the variables that were defined above.
mpu = adafruit_mpu6050.MPU6050(i2c, 0x68) # Initializes the sensor and tells it its address
display_bus = displayio.I2CDisplay(i2c, device_address=0x3d, reset=board.GP17)# Initializes the screen and tells it its address
display = adafruit_displayio_ssd1306.SSD1306(display_bus, width=128, height=64) #Tells the screen its limits and how its displayed

splash = displayio.Group() #creates the display group

title = "ANGULAR VELOCITY"

text_area = label.Label(terminalio.FONT, text=title, color=0xFFFF00, x=5, y=5) # font,color,and where it starts printing
splash.append(text_area)    
ledred = digitalio.DigitalInOut(board.GP13)
ledred.direction = digitalio.Direction.OUTPUT  # defines the red LED as an output and sets its pin as GP13 on the Pico
display.show(splash)
while True:


    x = round(mpu.gyro[0],3)
    y = round(mpu.gyro[1],3)
    z = round(mpu.gyro[2],3)

    text_area.text = (f" x:{x}\n y:{y}\n z:{z}")
    time.sleep(.1)

    x = round(mpu.acceleration[0],3)
    y = round(mpu.acceleration[1],3)
    z = round(mpu.acceleration[2],3)

    print(f"x:{ x} y:{y} z:{z}") # This is an F string which lets us put a variable that is changing in our serial monitor or in a OLED or LCD
    time.sleep(.1)

    if x < 8.5 and x > -8.5 and y < 8.5 and y > -8.5: # using 8.5 puts a deadzone so that the light wont flicker when it is close to 9
        ledred.value = False
        time.sleep(.01) 

    if x > 9 or x < -9 or y > 9 or y < -9: 
        ledred.value = True
        time.sleep(.01)
   